name: pipeline
on:
  push:
    branches:
      - main
      - develop
      - release


jobs:
  unit-test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Install dependencies for CasosDeUsos.Tests
        working-directory: CasosDeUsos.Tests
        run: dotnet restore

      - name: Run tests for CasosDeUsos.Tests
        working-directory: CasosDeUsos.Tests
        run: dotnet test --no-restore --verbosity normal

      - name: Install dependencies for Entidades.Tests
        working-directory: Entidades.Tests
        run: dotnet restore

      - name: Run tests for Entidades.Tests
        working-directory: Entidades.Tests
        run: dotnet test --no-restore --verbosity normal

      - name: Install dependencies for InterfaceAdapters.Tests
        working-directory: InterfaceAdapters.Tests
        run: dotnet restore

      - name: Run tests for InterfaceAdapters.Tests
        working-directory: InterfaceAdapters.Tests
        run: dotnet test --no-restore --verbosity normal

      - name: Install dependencies for Infra.Tests
        working-directory: Infra.Tests
        run: dotnet restore

      - name: Run tests for Infra.Tests
        working-directory: Infra.Tests
        run: dotnet test --no-restore --verbosity normal

  sonar-analysis:
    runs-on: windows-latest
    needs: unit-test

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Print secret
          run: echo $SONAR_TOKEN
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"mayaramanziFiap_Tech-Challenge-Fiap-Mc_King_Fase3" /o:"mayaramanzifiap" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build 9soat-g63-mc-king.sln
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: sonar-analysis
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore 9soat-g63-mc-king.sln

      - name: Build the project
        run: dotnet build --configuration Release 9soat-g63-mc-king.sln

      - name: Publish the project
        run: dotnet publish --configuration Release -o ./publish 9soat-g63-mc-king.sln

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build da Imagem Docker
        run: docker build -t rm359734/teste_fase3:${{ github.sha }} -f ./API/Dockerfile .
        

      - name: Tag Imagem Docker
        run: |
          docker tag rm359734/teste_fase3:${{ github.sha }} rm359734/teste_fase3:latest

      - name: Push da Imagem Docker
        run: |
          docker push rm359734/teste_fase3:${{ github.sha }}
          docker push rm359734/teste_fase3:latest

  deploy-STG:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    environment:
      name: stg

    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull da Imagem Docker para Deploy STG
        run: docker pull rm359734/teste_fase3:latest

      - name: Deploy STG
        shell: bash
        run: |
          echo "Deploy STG usando imagem Docker rm359734/teste_fase3:latest"
        
  smoketest:
    runs-on: ubuntu-latest
    needs: deploy-STG

    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy 
        shell: bash
        run: |
          sh 'scripts/smoketest.sh'

  testeIntegrados:
    runs-on: ubuntu-latest
    needs: smoketest

    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy 
        shell: bash
        run: |
          sh 'scripts/testeIntegrado.sh'

  deploy-pre:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release'
    environment:
      name: pre
    needs: build-and-push-docker
    steps:
      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull da Imagem Docker para Deploy PRE
        run: docker pull rm359734/teste_fase3:latest

      - name: Deploy PRE
        shell: bash
        run: |
          echo "Deploy PRE usando imagem Docker rm359734/teste_fase3:latest"

  smoketestPre:
    runs-on: ubuntu-latest
    needs: deploy-pre

    if: github.ref == 'refs/heads/release'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy 
        shell: bash
        run: |
          sh 'scripts/smoketest.sh'

  testeFuncionais:
    runs-on: ubuntu-latest
    needs: smoketestPre

    if: github.ref == 'refs/heads/release'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy 
        shell: bash
        run: |
          sh 'scripts/testesFuncionais.sh'  

  deploy-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: prod
    needs: build-and-push-docker
    steps:
      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull da Imagem Docker para Deploy PROD
        run: docker pull rm359734/teste_fase3:latest

      - name: Deploy PROD
        shell: bash
        run: |
          echo "Deploy PROD usando imagem Docker rm359734/teste_fase3:latest"

  generate-dockerrun:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    steps:
      - name: Criar Arquivo Dockerrun
        run: |
          echo '{
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "rm359734/teste_fase3:latest",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "80"
              },
              {
                "ContainerPort": "443"
              }
            ]
          }' > Dockerrun.aws.json

      - name: Verificar Arquivo Dockerrun
        run: cat Dockerrun.aws.json

      - name: Gerar ZIP para Deploy
        run: zip Dockerrun.zip Dockerrun.aws.json

      - name: Verificar Arquivos no Diret√≥rio
        run: ls -la

  deploy-aws:
    runs-on: ubuntu-latest
    needs: generate-dockerrun
    if: github.ref == 'refs/heads/main'
    environment:
      name: AWS-PRO
      url: http://devopsfiap-on-env1.us-east-1.elasticbeanstalk.com/
    steps:
      - name: Deploy para Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
          application_name: TechChallenge3
          environment_name: TechChallenge3-env
          region: us-east-1
          version_label: ${{ github.sha }}
          deployment_package: Dockerrun.zip
          wait_for_environment_recovery: 90
  
