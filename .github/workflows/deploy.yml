name: pipeline

on:
  push:
    branches:
      - main
      - develop
      - release

jobs:
  unit-test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Install dependencies for CasosDeUsos.Tests
        working-directory: CasosDeUsos.Tests
        run: dotnet restore

      - name: Run tests for CasosDeUsos.Tests
        working-directory: CasosDeUsos.Tests
        run: dotnet test --no-restore --verbosity normal

      - name: Install dependencies for Entidades.Tests
        working-directory: Entidades.Tests
        run: dotnet restore

      - name: Run tests for Entidades.Tests
        working-directory: Entidades.Tests
        run: dotnet test --no-restore --verbosity normal

      - name: Install dependencies for InterfaceAdapters.Tests
        working-directory: InterfaceAdapters.Tests
        run: dotnet restore

      - name: Run tests for InterfaceAdapters.Tests
        working-directory: InterfaceAdapters.Tests
        run: dotnet test --no-restore --verbosity normal

      - name: Install dependencies for Infra.Tests
        working-directory: Infra.Tests
        run: dotnet restore

      - name: Run tests for Infra.Tests
        working-directory: Infra.Tests
        run: dotnet test --no-restore --verbosity normal

  sonar-analysis:
    runs-on: windows-latest
    needs: unit-test

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"mayaramanziFiap_Tech-Challenge-Fiap-Mc_King_Fase3" /o:"mayaramanzifiap" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build 9soat-g63-mc-king.sln
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  build:
    runs-on: ubuntu-latest
    needs: unit-test
    #needs: sonar-analysis
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Install dependencies
      run: dotnet restore 9soat-g63-mc-king.sln

    - name: Build with .NET
      run: dotnet build --configuration Release --no-restore 9soat-g63-mc-king.sln

    - name: Publish
      run: dotnet publish -c Release -o publish 9soat-g63-mc-king.sln
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v4.4.0
      with:
        name: publish
        path: publish/

  deploy-STG:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: stg
    
    if: github.ref == 'refs/heads/develop'
    steps:
    - name: Deploy 
      shell: bash
      run: |
        echo "Deploy STG"
        
  smoketest:
    runs-on: ubuntu-latest
    needs: deploy-STG
    
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy 
        shell: bash
        run: |
          sh 'scripts/smoketest.sh'

  testeIntegrados:
    runs-on: ubuntu-latest
    needs: Smoketest
    
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy 
        shell: bash
        run: |
          sh 'scripts/testeIntegrado.sh'

  deploy-pre:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release'
    environment:
      name: pre
    needs: build
    steps:
    - name: Deploy 
      shell: bash
      run: |
        echo "Deploy PRE"

  smoketestPre:
    runs-on: ubuntu-latest
    needs: deploy-pre
    
    if: github.ref == 'refs/heads/release'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy 
        shell: bash
        run: |
          sh 'scripts/smoketest.sh'

  testeFuncionais:
    runs-on: ubuntu-latest
    needs: SmoketestPre
    
    if: github.ref == 'refs/heads/release'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy 
        shell: bash
        run: |
          sh 'scripts/testesFuncionais.sh'  

  deploy-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: prod
    needs: build
    steps:
    - name: Deploy 
      shell: bash
      run: |
        echo "Deploy PROD"

  deploy-aws:
    needs: build  
    name: Deploy-aws
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: AWS-PRO
      url: http://devopsfiap-on-env1.us-east-1.elasticbeanstalk.com/
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: publish
          path: publish/

      - name: Ensure `.runtimeconfig.json` Generation
        run: |
          find . -name "*.csproj" -exec sh -c 'echo "<PropertyGroup>
          <GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>
          </PropertyGroup>" >> {}' \;

      - name: Publish Application
        run: dotnet publish -c Release -o publish

      - name: Verify .runtimeconfig.json Presence
        run: |
          if [ ! -f publish/*.runtimeconfig.json ]; then
            echo "Error: .runtimeconfig.json file not found in the publish directory."
            exit 1
          fi

      - name: Create Deployment Package
        run: zip -r application.zip publish/

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
          application_name: TechChallenge3
          environment_name: TechChallenge3-env
          region: us-east-1
          version_label: ${{ github.SHA }}
          deployment_package: ./application.zip
          wait_for_environment_recovery: 90
          use_existing_version_if_available: false
