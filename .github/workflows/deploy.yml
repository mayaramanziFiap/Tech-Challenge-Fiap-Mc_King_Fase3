name: pipeline

on:
  push:
    branches:
      - main
      - develop
      - release

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore 9soat-g63-mc-king.sln

      - name: Build the project
        run: dotnet build --configuration Release -f 9soat-g63-mc-king.sln

      - name: Publish the project
        run: dotnet publish --configuration Release -o ./publish 9soat-g63-mc-king.sln

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build da Imagem Docker
        run: docker build -t rm359734/teste_fase3:${{ github.sha }} -f ../../Dockerfile .
        

      - name: Tag Imagem Docker
        run: |
          docker tag rm359734/teste_fase3:${{ github.sha }} rm359734/teste_fase3:latest

      - name: Push da Imagem Docker
        run: |
          docker push rm359734/teste_fase3:${{ github.sha }}
          docker push rm359734/teste_fase3:latest

  sonar-analysis:
    runs-on: ubuntu-latest
    needs: build-and-push-docker

    steps:
      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull da Imagem Docker para AnÃ¡lise SonarQube
        run: docker pull rm359734/teste_fase3:latest

      - name: Run SonarQube Analysis with Docker
        run: |
          docker run \
            --rm \
            -v ${{ github.workspace }}:/usr/src \
            sonarsource/sonar-scanner-cli \
            sonar-scanner \
            -Dsonar.projectKey="mayaramanziFiap_Tech-Challenge-Fiap-Mc_King_Fase3" \
            -Dsonar.organization="mayaramanzifiap" \
            -Dsonar.host.url="https://sonarcloud.io" \
            -Dsonar.login="${{ secrets.SONAR_TOKEN }}"

  deploy-STG:
    runs-on: ubuntu-latest
    needs: sonar-analysis
    environment:
      name: stg

    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull da Imagem Docker para Deploy STG
        run: docker pull rm359734/teste_fase3:latest

      - name: Deploy STG
        shell: bash
        run: |
          echo "Deploy STG usando imagem Docker rm359734/teste_fase3:latest"
        
  smoketest:
    runs-on: ubuntu-latest
    needs: deploy-STG

    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy 
        shell: bash
        run: |
          sh 'scripts/smoketest.sh'

  testeIntegrados:
    runs-on: ubuntu-latest
    needs: smoketest

    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy 
        shell: bash
        run: |
          sh 'scripts/testeIntegrado.sh'

  deploy-pre:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release'
    environment:
      name: pre
    needs: sonar-analysis
    steps:
      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull da Imagem Docker para Deploy PRE
        run: docker pull rm359734/teste_fase3:latest

      - name: Deploy PRE
        shell: bash
        run: |
          echo "Deploy PRE usando imagem Docker rm359734/teste_fase3:latest"

  smoketestPre:
    runs-on: ubuntu-latest
    needs: deploy-pre

    if: github.ref == 'refs/heads/release'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy 
        shell: bash
        run: |
          sh 'scripts/smoketest.sh'

  testeFuncionais:
    runs-on: ubuntu-latest
    needs: smoketestPre

    if: github.ref == 'refs/heads/release'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy 
        shell: bash
        run: |
          sh 'scripts/testesFuncionais.sh'  

  deploy-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: prod
    needs: sonar-analysis
    steps:
      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull da Imagem Docker para Deploy PROD
        run: docker pull rm359734/teste_fase3:latest

      - name: Deploy PROD
        shell: bash
        run: |
          echo "Deploy PROD usando imagem Docker rm359734/teste_fase3:latest"

  deploy-aws:
    needs: build-and-push-docker
    #needs: sonar-analysis
    name: Deploy-aws
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: AWS-PRO
      url: http://devopsfiap-on-env1.us-east-1.elasticbeanstalk.com/
    steps:
      - name: Criar Arquivo Dockerrun
        run: |
          echo '{
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "rm359734/teste_fase3:latest",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "80"
              }
            ]
          }' > Dockerrun.aws.json

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
          application_name: TechChallenge3
          environment_name: TechChallenge3-env
          region: us-east-1
          version_label: ${{ github.SHA }}
          deployment_package: Dockerrun.aws.json
          wait_for_environment_recovery: 90
          use_existing_version_if_available: false
